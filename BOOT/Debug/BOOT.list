
BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e2c  08002e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002e40  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a15a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd5  00000000  00000000  0002a196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b67  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a38a  00000000  00000000  0004fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1273  00000000  00000000  00059df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b06c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  0012b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002dcc 	.word	0x08002dcc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002dcc 	.word	0x08002dcc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <HAL_Init+0x40>)
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <HAL_Init+0x40>)
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_Init+0x40>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f94f 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f808 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 fad2 	bl	8002ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f967 	bl	800081a <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000564:	f000 f92f 	bl	80007c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000008 	.word	0x20000008
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	2000007c 	.word	0x2000007c

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d005      	beq.n	80005ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_Delay+0x44>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ee:	bf00      	nop
 80005f0:	f7ff ffde 	bl	80005b0 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8f7      	bhi.n	80005f0 <HAL_Delay+0x28>
  {
  }
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 021f 	and.w	r2, r3, #31
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	095b      	lsrs	r3, r3, #5
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	490c      	ldr	r1, [pc, #48]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4908      	ldr	r1, [pc, #32]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	3b04      	subs	r3, #4
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b480      	push	{r7}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	f1c3 0307 	rsb	r3, r3, #7
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf28      	it	cs
 8000722:	2304      	movcs	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	2b06      	cmp	r3, #6
 800072c:	d902      	bls.n	8000734 <NVIC_EncodePriority+0x30>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b03      	subs	r3, #3
 8000732:	e000      	b.n	8000736 <NVIC_EncodePriority+0x32>
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43da      	mvns	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	401a      	ands	r2, r3
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43d9      	mvns	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	4313      	orrs	r3, r2
         );
}
 800075e:	4618      	mov	r0, r3
 8000760:	3724      	adds	r7, #36	; 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800077c:	d301      	bcc.n	8000782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SysTick_Config+0x40>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078a:	210f      	movs	r1, #15
 800078c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000790:	f7ff ff8e 	bl	80006b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x40>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff29 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d8:	f7ff ff3e 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f7ff ff8e 	bl	8000704 <NVIC_EncodePriority>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff5d 	bl	80006b0 <__NVIC_SetPriority>
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff31 	bl	8000674 <__NVIC_EnableIRQ>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ffa2 	bl	800076c <SysTick_Config>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff feb6 	bl	80005b0 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b02      	cmp	r3, #2
 8000850:	d008      	beq.n	8000864 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e052      	b.n	800090a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0216 	bic.w	r2, r2, #22
 8000872:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000882:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <HAL_DMA_Abort+0x62>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000890:	2b00      	cmp	r3, #0
 8000892:	d007      	beq.n	80008a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f022 0208 	bic.w	r2, r2, #8
 80008a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0201 	bic.w	r2, r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008b4:	e013      	b.n	80008de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008b6:	f7ff fe7b 	bl	80005b0 <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d90c      	bls.n	80008de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2220      	movs	r2, #32
 80008c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2203      	movs	r2, #3
 80008d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80008da:	2303      	movs	r3, #3
 80008dc:	e015      	b.n	800090a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1e4      	bne.n	80008b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f0:	223f      	movs	r2, #63	; 0x3f
 80008f2:	409a      	lsls	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b02      	cmp	r3, #2
 8000924:	d004      	beq.n	8000930 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e00c      	b.n	800094a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2205      	movs	r2, #5
 8000934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0201 	bic.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e177      	b.n	8000c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 8166 	bne.w	8000c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d005      	beq.n	80009aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d130      	bne.n	8000a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68da      	ldr	r2, [r3, #12]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e0:	2201      	movs	r2, #1
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	f003 0201 	and.w	r2, r3, #1
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d017      	beq.n	8000a48 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d123      	bne.n	8000a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	08da      	lsrs	r2, r3, #3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3208      	adds	r2, #8
 8000a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	691a      	ldr	r2, [r3, #16]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	69b9      	ldr	r1, [r7, #24]
 8000a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0203 	and.w	r2, r3, #3
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f000 80c0 	beq.w	8000c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <HAL_GPIO_Init+0x324>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a65      	ldr	r2, [pc, #404]	; (8000c7c <HAL_GPIO_Init+0x324>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <HAL_GPIO_Init+0x324>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000afa:	4a61      	ldr	r2, [pc, #388]	; (8000c80 <HAL_GPIO_Init+0x328>)
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3302      	adds	r3, #2
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a58      	ldr	r2, [pc, #352]	; (8000c84 <HAL_GPIO_Init+0x32c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d037      	beq.n	8000b96 <HAL_GPIO_Init+0x23e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a57      	ldr	r2, [pc, #348]	; (8000c88 <HAL_GPIO_Init+0x330>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d031      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a56      	ldr	r2, [pc, #344]	; (8000c8c <HAL_GPIO_Init+0x334>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d02b      	beq.n	8000b8e <HAL_GPIO_Init+0x236>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a55      	ldr	r2, [pc, #340]	; (8000c90 <HAL_GPIO_Init+0x338>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d025      	beq.n	8000b8a <HAL_GPIO_Init+0x232>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a54      	ldr	r2, [pc, #336]	; (8000c94 <HAL_GPIO_Init+0x33c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d01f      	beq.n	8000b86 <HAL_GPIO_Init+0x22e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a53      	ldr	r2, [pc, #332]	; (8000c98 <HAL_GPIO_Init+0x340>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d019      	beq.n	8000b82 <HAL_GPIO_Init+0x22a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <HAL_GPIO_Init+0x344>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <HAL_GPIO_Init+0x348>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d00d      	beq.n	8000b7a <HAL_GPIO_Init+0x222>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a50      	ldr	r2, [pc, #320]	; (8000ca4 <HAL_GPIO_Init+0x34c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0x21e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_GPIO_Init+0x350>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_GPIO_Init+0x21a>
 8000b6e:	2309      	movs	r3, #9
 8000b70:	e012      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b72:	230a      	movs	r3, #10
 8000b74:	e010      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b76:	2308      	movs	r3, #8
 8000b78:	e00e      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	e00c      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b7e:	2306      	movs	r3, #6
 8000b80:	e00a      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e008      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b86:	2304      	movs	r3, #4
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e004      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x240>
 8000b96:	2300      	movs	r3, #0
 8000b98:	69fa      	ldr	r2, [r7, #28]
 8000b9a:	f002 0203 	and.w	r2, r2, #3
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba8:	4935      	ldr	r1, [pc, #212]	; (8000c80 <HAL_GPIO_Init+0x328>)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	089b      	lsrs	r3, r3, #2
 8000bae:	3302      	adds	r3, #2
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000be0:	4b32      	ldr	r3, [pc, #200]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_GPIO_Init+0x354>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	f67f ae84 	bls.w	8000974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40013800 	.word	0x40013800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40021400 	.word	0x40021400
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40021c00 	.word	0x40021c00
 8000ca4:	40022000 	.word	0x40022000
 8000ca8:	40022400 	.word	0x40022400
 8000cac:	40013c00 	.word	0x40013c00

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ccc:	e003      	b.n	8000cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	041a      	lsls	r2, r3, #16
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	619a      	str	r2, [r3, #24]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e264      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d075      	beq.n	8000dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d02:	4ba3      	ldr	r3, [pc, #652]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00c      	beq.n	8000d28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0e:	4ba0      	ldr	r3, [pc, #640]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d112      	bne.n	8000d40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d1a:	4b9d      	ldr	r3, [pc, #628]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d26:	d10b      	bne.n	8000d40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	4b99      	ldr	r3, [pc, #612]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d05b      	beq.n	8000dec <HAL_RCC_OscConfig+0x108>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d157      	bne.n	8000dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e23f      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d48:	d106      	bne.n	8000d58 <HAL_RCC_OscConfig+0x74>
 8000d4a:	4b91      	ldr	r3, [pc, #580]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a90      	ldr	r2, [pc, #576]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e01d      	b.n	8000d94 <HAL_RCC_OscConfig+0xb0>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x98>
 8000d62:	4b8b      	ldr	r3, [pc, #556]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a87      	ldr	r2, [pc, #540]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e00b      	b.n	8000d94 <HAL_RCC_OscConfig+0xb0>
 8000d7c:	4b84      	ldr	r3, [pc, #528]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a83      	ldr	r2, [pc, #524]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b81      	ldr	r3, [pc, #516]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a80      	ldr	r2, [pc, #512]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc08 	bl	80005b0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fc04 	bl	80005b0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e204      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0xc0>
 8000dc2:	e014      	b.n	8000dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fbf4 	bl	80005b0 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fbf0 	bl	80005b0 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e1f0      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	4b6c      	ldr	r3, [pc, #432]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0xe8>
 8000dea:	e000      	b.n	8000dee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d063      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dfa:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00b      	beq.n	8000e1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d11c      	bne.n	8000e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e12:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_RCC_OscConfig+0x152>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e1c4      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e36:	4b56      	ldr	r3, [pc, #344]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4952      	ldr	r1, [pc, #328]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	e03a      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fba9 	bl	80005b0 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fba5 	bl	80005b0 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1a5      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4940      	ldr	r1, [pc, #256]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
 8000e94:	e015      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb88 	bl	80005b0 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fb84 	bl	80005b0 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e184      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d030      	beq.n	8000f30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d016      	beq.n	8000f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <HAL_RCC_OscConfig+0x2b4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000edc:	f7ff fb68 	bl	80005b0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fb64 	bl	80005b0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e164      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x200>
 8000f02:	e015      	b.n	8000f30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_RCC_OscConfig+0x2b4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb51 	bl	80005b0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f12:	f7ff fb4d 	bl	80005b0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e14d      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a0 	beq.w	800107e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10f      	bne.n	8000f6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_RCC_OscConfig+0x2b8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d121      	bne.n	8000fbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_RCC_OscConfig+0x2b8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_RCC_OscConfig+0x2b8>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fb13 	bl	80005b0 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8c:	e011      	b.n	8000fb2 <HAL_RCC_OscConfig+0x2ce>
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	42470000 	.word	0x42470000
 8000f98:	42470e80 	.word	0x42470e80
 8000f9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa0:	f7ff fb06 	bl	80005b0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e106      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x4e4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
 8000fc6:	4b81      	ldr	r3, [pc, #516]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a80      	ldr	r2, [pc, #512]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd2:	e01c      	b.n	800100e <HAL_RCC_OscConfig+0x32a>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d10c      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x312>
 8000fdc:	4b7b      	ldr	r3, [pc, #492]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe0:	4a7a      	ldr	r2, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8000fe8:	4b78      	ldr	r3, [pc, #480]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fec:	4a77      	ldr	r2, [pc, #476]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff4:	e00b      	b.n	800100e <HAL_RCC_OscConfig+0x32a>
 8000ff6:	4b75      	ldr	r3, [pc, #468]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffa:	4a74      	ldr	r2, [pc, #464]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6713      	str	r3, [r2, #112]	; 0x70
 8001002:	4b72      	ldr	r3, [pc, #456]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001006:	4a71      	ldr	r2, [pc, #452]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d015      	beq.n	8001042 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001016:	f7ff facb 	bl	80005b0 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fac7 	bl	80005b0 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e0c5      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001034:	4b65      	ldr	r3, [pc, #404]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ee      	beq.n	800101e <HAL_RCC_OscConfig+0x33a>
 8001040:	e014      	b.n	800106c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fab5 	bl	80005b0 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fab1 	bl	80005b0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0af      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001060:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1ee      	bne.n	800104a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d105      	bne.n	800107e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001072:	4b56      	ldr	r3, [pc, #344]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 809b 	beq.w	80011be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001088:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d05c      	beq.n	800114e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d141      	bne.n	8001120 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x4ec>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fa85 	bl	80005b0 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fa81 	bl	80005b0 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e081      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	019b      	lsls	r3, r3, #6
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	3b01      	subs	r3, #1
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	061b      	lsls	r3, r3, #24
 80010ec:	4937      	ldr	r1, [pc, #220]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_RCC_OscConfig+0x4ec>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fa5a 	bl	80005b0 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fa56 	bl	80005b0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e056      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x41c>
 800111e:	e04e      	b.n	80011be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_OscConfig+0x4ec>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fa43 	bl	80005b0 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fa3f 	bl	80005b0 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e03f      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x44a>
 800114c:	e037      	b.n	80011be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e032      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_RCC_OscConfig+0x4e8>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d028      	beq.n	80011ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001172:	429a      	cmp	r2, r3
 8001174:	d121      	bne.n	80011ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001180:	429a      	cmp	r2, r3
 8001182:	d11a      	bne.n	80011ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001190:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001192:	4293      	cmp	r3, r2
 8001194:	d111      	bne.n	80011ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	3b01      	subs	r3, #1
 80011a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40007000 	.word	0x40007000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	42470060 	.word	0x42470060

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0cc      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90c      	bls.n	8001210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800124a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d044      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e067      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4934      	ldr	r1, [pc, #208]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff f974 	bl	80005b0 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff f970 	bl	80005b0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20c      	bcs.n	800131c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f889 	bl	8001470 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8d4 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00
 8001390:	40023800 	.word	0x40023800
 8001394:	08002e0c 	.word	0x08002e0c
 8001398:	20000008 	.word	0x20000008
 800139c:	20000000 	.word	0x20000000

080013a0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d129      	bne.n	8001406 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80013ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	481f      	ldr	r0, [pc, #124]	; (8001468 <HAL_RCC_MCOConfig+0xc8>)
 80013ec:	f7ff fab4 	bl	8000958 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	4919      	ldr	r1, [pc, #100]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001404:	e029      	b.n	800145a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <HAL_RCC_MCOConfig+0xcc>)
 8001440:	f7ff fa8a 	bl	8000958 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	00d9      	lsls	r1, r3, #3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	430b      	orrs	r3, r1
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <HAL_RCC_MCOConfig+0xc4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800

08001470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001476:	2100      	movs	r1, #0
 8001478:	6079      	str	r1, [r7, #4]
 800147a:	2100      	movs	r1, #0
 800147c:	60f9      	str	r1, [r7, #12]
 800147e:	2100      	movs	r1, #0
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001482:	2100      	movs	r1, #0
 8001484:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001486:	4952      	ldr	r1, [pc, #328]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001488:	6889      	ldr	r1, [r1, #8]
 800148a:	f001 010c 	and.w	r1, r1, #12
 800148e:	2908      	cmp	r1, #8
 8001490:	d00d      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x3e>
 8001492:	2908      	cmp	r1, #8
 8001494:	f200 8094 	bhi.w	80015c0 <HAL_RCC_GetSysClockFreq+0x150>
 8001498:	2900      	cmp	r1, #0
 800149a:	d002      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x32>
 800149c:	2904      	cmp	r1, #4
 800149e:	d003      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x38>
 80014a0:	e08e      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a2:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80014a4:	60bb      	str	r3, [r7, #8]
       break;
 80014a6:	e08e      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80014aa:	60bb      	str	r3, [r7, #8]
      break;
 80014ac:	e08b      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ae:	4948      	ldr	r1, [pc, #288]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80014b0:	6849      	ldr	r1, [r1, #4]
 80014b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80014b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b8:	4945      	ldr	r1, [pc, #276]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80014ba:	6849      	ldr	r1, [r1, #4]
 80014bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d024      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c4:	4942      	ldr	r1, [pc, #264]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80014c6:	6849      	ldr	r1, [r1, #4]
 80014c8:	0989      	lsrs	r1, r1, #6
 80014ca:	4608      	mov	r0, r1
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80014d4:	f04f 0500 	mov.w	r5, #0
 80014d8:	ea00 0204 	and.w	r2, r0, r4
 80014dc:	ea01 0305 	and.w	r3, r1, r5
 80014e0:	493d      	ldr	r1, [pc, #244]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80014e2:	fb01 f003 	mul.w	r0, r1, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	fb01 f102 	mul.w	r1, r1, r2
 80014ec:	1844      	adds	r4, r0, r1
 80014ee:	493a      	ldr	r1, [pc, #232]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80014f0:	fba2 0101 	umull	r0, r1, r2, r1
 80014f4:	1863      	adds	r3, r4, r1
 80014f6:	4619      	mov	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f7fe fe74 	bl	80001ec <__aeabi_uldivmod>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4613      	mov	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e04a      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	099b      	lsrs	r3, r3, #6
 8001514:	461a      	mov	r2, r3
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	ea02 0400 	and.w	r4, r2, r0
 8001526:	ea03 0501 	and.w	r5, r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	014b      	lsls	r3, r1, #5
 8001538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800153c:	0142      	lsls	r2, r0, #5
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	1b00      	subs	r0, r0, r4
 8001544:	eb61 0105 	sbc.w	r1, r1, r5
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	018b      	lsls	r3, r1, #6
 8001552:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001556:	0182      	lsls	r2, r0, #6
 8001558:	1a12      	subs	r2, r2, r0
 800155a:	eb63 0301 	sbc.w	r3, r3, r1
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	00d9      	lsls	r1, r3, #3
 8001568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800156c:	00d0      	lsls	r0, r2, #3
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	1912      	adds	r2, r2, r4
 8001574:	eb45 0303 	adc.w	r3, r5, r3
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	f04f 0100 	mov.w	r1, #0
 8001580:	0299      	lsls	r1, r3, #10
 8001582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001586:	0290      	lsls	r0, r2, #10
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	461a      	mov	r2, r3
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7fe fe28 	bl	80001ec <__aeabi_uldivmod>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4613      	mov	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	3301      	adds	r3, #1
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	60bb      	str	r3, [r7, #8]
      break;
 80015be:	e002      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80015c2:	60bb      	str	r3, [r7, #8]
      break;
 80015c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c6:	68bb      	ldr	r3, [r7, #8]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	017d7840 	.word	0x017d7840

080015dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f8:	f7ff fff0 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0a9b      	lsrs	r3, r3, #10
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	08002e1c 	.word	0x08002e1c

0800161c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001620:	f7ff ffdc 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0b5b      	lsrs	r3, r3, #13
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	08002e1c 	.word	0x08002e1c

08001644 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e034      	b.n	80016c4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f001 f88e 	bl	8002790 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3308      	adds	r3, #8
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f000 fe6c 	bl	800235c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	461a      	mov	r2, r3
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	f000 fec8 	bl	8002424 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6858      	ldr	r0, [r3, #4]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	f000 ff13 	bl	80024cc <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6892      	ldr	r2, [r2, #8]
 80016ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	6892      	ldr	r2, [r2, #8]
 80016ba:	f041 0101 	orr.w	r1, r1, #1
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d101      	bne.n	80016ee <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 80016ea:	2301      	movs	r3, #1
 80016ec:	e028      	b.n	8001740 <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_SRAM_Write_16b+0x30>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e021      	b.n	8001740 <HAL_SRAM_Write_16b+0x74>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 800170c:	e00c      	b.n	8001728 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	881a      	ldrh	r2, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3302      	adds	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3302      	adds	r3, #2
 8001720:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e03f      	b.n	80017de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 fa64 	bl	8002c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800178e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fc1b 	bl	8001fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af02      	add	r7, sp, #8
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b20      	cmp	r3, #32
 8001804:	d17c      	bne.n	8001900 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_UART_Transmit+0x2c>
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e075      	b.n	8001902 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_UART_Transmit+0x3e>
 8001820:	2302      	movs	r3, #2
 8001822:	e06e      	b.n	8001902 <HAL_UART_Transmit+0x11c>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2221      	movs	r2, #33	; 0x21
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800183a:	f7fe feb9 	bl	80005b0 <HAL_GetTick>
 800183e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001854:	d108      	bne.n	8001868 <HAL_UART_Transmit+0x82>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d104      	bne.n	8001868 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e003      	b.n	8001870 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001878:	e02a      	b.n	80018d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2200      	movs	r2, #0
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fa17 	bl	8001cb8 <UART_WaitOnFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e036      	b.n	8001902 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10b      	bne.n	80018b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	3302      	adds	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	e007      	b.n	80018c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1cf      	bne.n	800187a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f9e7 	bl	8001cb8 <UART_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e006      	b.n	8001902 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	e000      	b.n	8001902 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001900:	2302      	movs	r3, #2
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_UART_IRQHandler+0x52>
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 faa1 	bl	8001e9e <UART_Receive_IT>
      return;
 800195c:	e17c      	b.n	8001c58 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80b1 	beq.w	8001ac8 <HAL_UART_IRQHandler+0x1bc>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_UART_IRQHandler+0x70>
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_UART_IRQHandler+0x90>
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_UART_IRQHandler+0xb0>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f043 0202 	orr.w	r2, r3, #2
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_UART_IRQHandler+0xd0>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f043 0204 	orr.w	r2, r3, #4
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00f      	beq.n	8001a06 <HAL_UART_IRQHandler+0xfa>
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <HAL_UART_IRQHandler+0xee>
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f043 0208 	orr.w	r2, r3, #8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 811f 	beq.w	8001c4e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_UART_IRQHandler+0x11e>
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fa3a 	bl	8001e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a34:	2b40      	cmp	r3, #64	; 0x40
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <HAL_UART_IRQHandler+0x146>
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d031      	beq.n	8001ab6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f97a 	bl	8001d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b40      	cmp	r3, #64	; 0x40
 8001a64:	d123      	bne.n	8001aae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d013      	beq.n	8001aa6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	4a77      	ldr	r2, [pc, #476]	; (8001c60 <HAL_UART_IRQHandler+0x354>)
 8001a84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe ff41 	bl	8000912 <HAL_DMA_Abort_IT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa4:	e00e      	b.n	8001ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8f0 	bl	8001c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aac:	e00a      	b.n	8001ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8ec 	bl	8001c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab4:	e006      	b.n	8001ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8e8 	bl	8001c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ac2:	e0c4      	b.n	8001c4e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac4:	bf00      	nop
    return;
 8001ac6:	e0c2      	b.n	8001c4e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 80a2 	bne.w	8001c16 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 809c 	beq.w	8001c16 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8096 	beq.w	8001c16 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d14f      	bne.n	8001bae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b18:	8a3b      	ldrh	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8099 	beq.w	8001c52 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b24:	8a3a      	ldrh	r2, [r7, #16]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	f080 8093 	bcs.w	8001c52 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	8a3a      	ldrh	r2, [r7, #16]
 8001b30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d02b      	beq.n	8001b96 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b6c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0210 	bic.w	r2, r2, #16
 8001b8a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fe4e 	bl	8000832 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f87a 	bl	8001ca0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001bac:	e051      	b.n	8001c52 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d047      	beq.n	8001c56 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001bc6:	8a7b      	ldrh	r3, [r7, #18]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d044      	beq.n	8001c56 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bda:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0210 	bic.w	r2, r2, #16
 8001c08:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c0a:	8a7b      	ldrh	r3, [r7, #18]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f846 	bl	8001ca0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c14:	e01f      	b.n	8001c56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_UART_IRQHandler+0x326>
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8cf 	bl	8001dce <UART_Transmit_IT>
    return;
 8001c30:	e012      	b.n	8001c58 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_UART_IRQHandler+0x34c>
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f911 	bl	8001e6e <UART_EndTransmit_IT>
    return;
 8001c4c:	e004      	b.n	8001c58 <HAL_UART_IRQHandler+0x34c>
    return;
 8001c4e:	bf00      	nop
 8001c50:	e002      	b.n	8001c58 <HAL_UART_IRQHandler+0x34c>
      return;
 8001c52:	bf00      	nop
 8001c54:	e000      	b.n	8001c58 <HAL_UART_IRQHandler+0x34c>
      return;
 8001c56:	bf00      	nop
  }
}
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08001da7 	.word	0x08001da7

08001c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc8:	e02c      	b.n	8001d24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd0:	d028      	beq.n	8001d24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cd8:	f7fe fc6a 	bl	80005b0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d21d      	bcs.n	8001d24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e00f      	b.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d0c3      	beq.n	8001cca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff ff63 	bl	8001c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b21      	cmp	r3, #33	; 0x21
 8001de0:	d13e      	bne.n	8001e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dea:	d114      	bne.n	8001e16 <UART_Transmit_IT+0x48>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d110      	bne.n	8001e16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	621a      	str	r2, [r3, #32]
 8001e14:	e008      	b.n	8001e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6211      	str	r1, [r2, #32]
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4619      	mov	r1, r3
 8001e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10f      	bne.n	8001e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fee8 	bl	8001c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b22      	cmp	r3, #34	; 0x22
 8001eb0:	f040 8087 	bne.w	8001fc2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebc:	d117      	bne.n	8001eee <UART_Receive_IT+0x50>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d113      	bne.n	8001eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	1c9a      	adds	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
 8001eec:	e026      	b.n	8001f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d007      	beq.n	8001f12 <UART_Receive_IT+0x74>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <UART_Receive_IT+0x82>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e008      	b.n	8001f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d136      	bne.n	8001fbe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0220 	bic.w	r2, r2, #32
 8001f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10e      	bne.n	8001fae <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0210 	bic.w	r2, r2, #16
 8001f9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe7a 	bl	8001ca0 <HAL_UARTEx_RxEventCallback>
 8001fac:	e002      	b.n	8001fb4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fe62 	bl	8001c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e002      	b.n	8001fc4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	b09f      	sub	sp, #124	; 0x7c
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	ea40 0301 	orr.w	r3, r0, r1
 8001fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4313      	orrs	r3, r2
 8002004:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002010:	f021 010c 	bic.w	r1, r1, #12
 8002014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201a:	430b      	orrs	r3, r1
 800201c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800201e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	6999      	ldr	r1, [r3, #24]
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	ea40 0301 	orr.w	r3, r0, r1
 8002034:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4bc5      	ldr	r3, [pc, #788]	; (8002350 <UART_SetConfig+0x384>)
 800203c:	429a      	cmp	r2, r3
 800203e:	d004      	beq.n	800204a <UART_SetConfig+0x7e>
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4bc3      	ldr	r3, [pc, #780]	; (8002354 <UART_SetConfig+0x388>)
 8002046:	429a      	cmp	r2, r3
 8002048:	d103      	bne.n	8002052 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800204a:	f7ff fae7 	bl	800161c <HAL_RCC_GetPCLK2Freq>
 800204e:	6778      	str	r0, [r7, #116]	; 0x74
 8002050:	e002      	b.n	8002058 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002052:	f7ff facf 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8002056:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002060:	f040 80b6 	bne.w	80021d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002066:	461c      	mov	r4, r3
 8002068:	f04f 0500 	mov.w	r5, #0
 800206c:	4622      	mov	r2, r4
 800206e:	462b      	mov	r3, r5
 8002070:	1891      	adds	r1, r2, r2
 8002072:	6439      	str	r1, [r7, #64]	; 0x40
 8002074:	415b      	adcs	r3, r3
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
 8002078:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800207c:	1912      	adds	r2, r2, r4
 800207e:	eb45 0303 	adc.w	r3, r5, r3
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	00d9      	lsls	r1, r3, #3
 800208c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002090:	00d0      	lsls	r0, r2, #3
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	1911      	adds	r1, r2, r4
 8002098:	6639      	str	r1, [r7, #96]	; 0x60
 800209a:	416b      	adcs	r3, r5
 800209c:	667b      	str	r3, [r7, #100]	; 0x64
 800209e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	1891      	adds	r1, r2, r2
 80020aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80020ac:	415b      	adcs	r3, r3
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80020b8:	f7fe f898 	bl	80001ec <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4ba5      	ldr	r3, [pc, #660]	; (8002358 <UART_SetConfig+0x38c>)
 80020c2:	fba3 2302 	umull	r2, r3, r3, r2
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	011e      	lsls	r6, r3, #4
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	461c      	mov	r4, r3
 80020ce:	f04f 0500 	mov.w	r5, #0
 80020d2:	4622      	mov	r2, r4
 80020d4:	462b      	mov	r3, r5
 80020d6:	1891      	adds	r1, r2, r2
 80020d8:	6339      	str	r1, [r7, #48]	; 0x30
 80020da:	415b      	adcs	r3, r3
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
 80020de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020e2:	1912      	adds	r2, r2, r4
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	00d9      	lsls	r1, r3, #3
 80020f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f6:	00d0      	lsls	r0, r2, #3
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	1911      	adds	r1, r2, r4
 80020fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002100:	416b      	adcs	r3, r5
 8002102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	461a      	mov	r2, r3
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	1891      	adds	r1, r2, r2
 8002110:	62b9      	str	r1, [r7, #40]	; 0x28
 8002112:	415b      	adcs	r3, r3
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800211a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800211e:	f7fe f865 	bl	80001ec <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4b8c      	ldr	r3, [pc, #560]	; (8002358 <UART_SetConfig+0x38c>)
 8002128:	fba3 1302 	umull	r1, r3, r3, r2
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	2164      	movs	r1, #100	; 0x64
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	3332      	adds	r3, #50	; 0x32
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <UART_SetConfig+0x38c>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002148:	441e      	add	r6, r3
 800214a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214c:	4618      	mov	r0, r3
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	1894      	adds	r4, r2, r2
 8002158:	623c      	str	r4, [r7, #32]
 800215a:	415b      	adcs	r3, r3
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002162:	1812      	adds	r2, r2, r0
 8002164:	eb41 0303 	adc.w	r3, r1, r3
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	f04f 0500 	mov.w	r5, #0
 8002170:	00dd      	lsls	r5, r3, #3
 8002172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002176:	00d4      	lsls	r4, r2, #3
 8002178:	4622      	mov	r2, r4
 800217a:	462b      	mov	r3, r5
 800217c:	1814      	adds	r4, r2, r0
 800217e:	653c      	str	r4, [r7, #80]	; 0x50
 8002180:	414b      	adcs	r3, r1
 8002182:	657b      	str	r3, [r7, #84]	; 0x54
 8002184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	461a      	mov	r2, r3
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	1891      	adds	r1, r2, r2
 8002190:	61b9      	str	r1, [r7, #24]
 8002192:	415b      	adcs	r3, r3
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800219e:	f7fe f825 	bl	80001ec <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <UART_SetConfig+0x38c>)
 80021a8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	2164      	movs	r1, #100	; 0x64
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	3332      	adds	r3, #50	; 0x32
 80021ba:	4a67      	ldr	r2, [pc, #412]	; (8002358 <UART_SetConfig+0x38c>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	f003 0207 	and.w	r2, r3, #7
 80021c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4432      	add	r2, r6
 80021cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021ce:	e0b9      	b.n	8002344 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	461c      	mov	r4, r3
 80021d4:	f04f 0500 	mov.w	r5, #0
 80021d8:	4622      	mov	r2, r4
 80021da:	462b      	mov	r3, r5
 80021dc:	1891      	adds	r1, r2, r2
 80021de:	6139      	str	r1, [r7, #16]
 80021e0:	415b      	adcs	r3, r3
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021e8:	1912      	adds	r2, r2, r4
 80021ea:	eb45 0303 	adc.w	r3, r5, r3
 80021ee:	f04f 0000 	mov.w	r0, #0
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	00d9      	lsls	r1, r3, #3
 80021f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021fc:	00d0      	lsls	r0, r2, #3
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	eb12 0804 	adds.w	r8, r2, r4
 8002206:	eb43 0905 	adc.w	r9, r3, r5
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	008b      	lsls	r3, r1, #2
 800221e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002222:	0082      	lsls	r2, r0, #2
 8002224:	4640      	mov	r0, r8
 8002226:	4649      	mov	r1, r9
 8002228:	f7fd ffe0 	bl	80001ec <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4b49      	ldr	r3, [pc, #292]	; (8002358 <UART_SetConfig+0x38c>)
 8002232:	fba3 2302 	umull	r2, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	011e      	lsls	r6, r3, #4
 800223a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223c:	4618      	mov	r0, r3
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	1894      	adds	r4, r2, r2
 8002248:	60bc      	str	r4, [r7, #8]
 800224a:	415b      	adcs	r3, r3
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002252:	1812      	adds	r2, r2, r0
 8002254:	eb41 0303 	adc.w	r3, r1, r3
 8002258:	f04f 0400 	mov.w	r4, #0
 800225c:	f04f 0500 	mov.w	r5, #0
 8002260:	00dd      	lsls	r5, r3, #3
 8002262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002266:	00d4      	lsls	r4, r2, #3
 8002268:	4622      	mov	r2, r4
 800226a:	462b      	mov	r3, r5
 800226c:	1814      	adds	r4, r2, r0
 800226e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002270:	414b      	adcs	r3, r1
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	008b      	lsls	r3, r1, #2
 8002288:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800228c:	0082      	lsls	r2, r0, #2
 800228e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002292:	f7fd ffab 	bl	80001ec <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <UART_SetConfig+0x38c>)
 800229c:	fba3 1302 	umull	r1, r3, r3, r2
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	2164      	movs	r1, #100	; 0x64
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	3332      	adds	r3, #50	; 0x32
 80022ae:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <UART_SetConfig+0x38c>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	441e      	add	r6, r3
 80022bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022be:	4618      	mov	r0, r3
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	1894      	adds	r4, r2, r2
 80022ca:	603c      	str	r4, [r7, #0]
 80022cc:	415b      	adcs	r3, r3
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022d4:	1812      	adds	r2, r2, r0
 80022d6:	eb41 0303 	adc.w	r3, r1, r3
 80022da:	f04f 0400 	mov.w	r4, #0
 80022de:	f04f 0500 	mov.w	r5, #0
 80022e2:	00dd      	lsls	r5, r3, #3
 80022e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022e8:	00d4      	lsls	r4, r2, #3
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	eb12 0a00 	adds.w	sl, r2, r0
 80022f2:	eb43 0b01 	adc.w	fp, r3, r1
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	008b      	lsls	r3, r1, #2
 800230a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800230e:	0082      	lsls	r2, r0, #2
 8002310:	4650      	mov	r0, sl
 8002312:	4659      	mov	r1, fp
 8002314:	f7fd ff6a 	bl	80001ec <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <UART_SetConfig+0x38c>)
 800231e:	fba3 1302 	umull	r1, r3, r3, r2
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2164      	movs	r1, #100	; 0x64
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	3332      	adds	r3, #50	; 0x32
 8002330:	4a09      	ldr	r2, [pc, #36]	; (8002358 <UART_SetConfig+0x38c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4432      	add	r2, r6
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	bf00      	nop
 8002346:	377c      	adds	r7, #124	; 0x7c
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234e:	bf00      	nop
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	51eb851f 	.word	0x51eb851f

0800235c <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <FMC_NORSRAM_Init+0xc4>)
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002386:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 800238c:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 8002392:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 8002398:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 800239e:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 80023a4:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 80023aa:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 80023b0:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 80023b6:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 80023bc:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 80023c2:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 80023c8:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 80023ce:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d103      	bne.n	80023e6 <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e4:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fa:	d10a      	bne.n	8002412 <FMC_NORSRAM_Init+0xb6>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	ffe00080 	.word	0xffe00080

08002424 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002446:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8002452:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 800245a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 8002462:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	3b01      	subs	r3, #1
 800246a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 800246c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	3b02      	subs	r3, #2
 8002474:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8002476:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 800247c:	4313      	orrs	r3, r2
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d10e      	bne.n	80024bc <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024a6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	051b      	lsls	r3, r3, #20
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e4:	d122      	bne.n	800252c <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ee:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002502:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800250a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8002512:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002518:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6979      	ldr	r1, [r7, #20]
 8002526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800252a:	e005      	b.n	8002538 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	cff00000 	.word	0xcff00000

0800254c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <MX_FMC_Init+0x158>)
 8002566:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800256a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <MX_FMC_Init+0x158>)
 800256e:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <MX_FMC_Init+0x15c>)
 8002570:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002572:	4b4c      	ldr	r3, [pc, #304]	; (80026a4 <MX_FMC_Init+0x158>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <MX_FMC_Init+0x158>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <MX_FMC_Init+0x158>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <MX_FMC_Init+0x158>)
 8002586:	2210      	movs	r2, #16
 8002588:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800258a:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <MX_FMC_Init+0x158>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002590:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <MX_FMC_Init+0x158>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8002596:	4b43      	ldr	r3, [pc, #268]	; (80026a4 <MX_FMC_Init+0x158>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <MX_FMC_Init+0x158>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80025a2:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <MX_FMC_Init+0x158>)
 80025a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <MX_FMC_Init+0x158>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <MX_FMC_Init+0x158>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <MX_FMC_Init+0x158>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <MX_FMC_Init+0x158>)
 80025be:	2200      	movs	r2, #0
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <MX_FMC_Init+0x158>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80025c8:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <MX_FMC_Init+0x158>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80025ce:	230f      	movs	r3, #15
 80025d0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80025d2:	230f      	movs	r3, #15
 80025d4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80025d6:	23ff      	movs	r3, #255	; 0xff
 80025d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80025da:	230f      	movs	r3, #15
 80025dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80025de:	2310      	movs	r3, #16
 80025e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80025e2:	2311      	movs	r3, #17
 80025e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2200      	movs	r2, #0
 80025ee:	4619      	mov	r1, r3
 80025f0:	482c      	ldr	r0, [pc, #176]	; (80026a4 <MX_FMC_Init+0x158>)
 80025f2:	f7ff f827 	bl	8001644 <HAL_SRAM_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80025fc:	f000 fa58 	bl	8002ab0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <MX_FMC_Init+0x160>)
 8002602:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002606:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <MX_FMC_Init+0x160>)
 800260a:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <MX_FMC_Init+0x15c>)
 800260c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <MX_FMC_Init+0x160>)
 8002610:	2202      	movs	r2, #2
 8002612:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <MX_FMC_Init+0x160>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <MX_FMC_Init+0x160>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <MX_FMC_Init+0x160>)
 8002622:	2210      	movs	r2, #16
 8002624:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_FMC_Init+0x160>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_FMC_Init+0x160>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  hsram2.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_FMC_Init+0x160>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_FMC_Init+0x160>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_FMC_Init+0x160>)
 8002640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_FMC_Init+0x160>)
 8002648:	2200      	movs	r2, #0
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_FMC_Init+0x160>)
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_FMC_Init+0x160>)
 8002654:	2200      	movs	r2, #0
 8002656:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_FMC_Init+0x160>)
 800265a:	2200      	movs	r2, #0
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_FMC_Init+0x160>)
 8002660:	2200      	movs	r2, #0
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_FMC_Init+0x160>)
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800266a:	230f      	movs	r3, #15
 800266c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800266e:	230f      	movs	r3, #15
 8002670:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002672:	23ff      	movs	r3, #255	; 0xff
 8002674:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002676:	230f      	movs	r3, #15
 8002678:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800267a:	2310      	movs	r3, #16
 800267c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800267e:	2311      	movs	r3, #17
 8002680:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	4619      	mov	r1, r3
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <MX_FMC_Init+0x160>)
 800268e:	f7fe ffd9 	bl	8001644 <HAL_SRAM_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_FMC_Init+0x150>
  {
    Error_Handler( );
 8002698:	f000 fa0a 	bl	8002ab0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000080 	.word	0x20000080
 80026a8:	a0000104 	.word	0xa0000104
 80026ac:	200000d0 	.word	0x200000d0

080026b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_FMC_MspInit+0xc8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d151      	bne.n	8002770 <HAL_FMC_MspInit+0xc0>
    return;
  }
  FMC_Initialized = 1;
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_FMC_MspInit+0xc8>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_FMC_MspInit+0xcc>)
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	4a28      	ldr	r2, [pc, #160]	; (800277c <HAL_FMC_MspInit+0xcc>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6393      	str	r3, [r2, #56]	; 0x38
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_FMC_MspInit+0xcc>)
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 80026ee:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80026f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002700:	230c      	movs	r3, #12
 8002702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	4619      	mov	r1, r3
 8002708:	481d      	ldr	r0, [pc, #116]	; (8002780 <HAL_FMC_MspInit+0xd0>)
 800270a:	f7fe f925 	bl	8000958 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800270e:	f243 033f 	movw	r3, #12351	; 0x303f
 8002712:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002720:	230c      	movs	r3, #12
 8002722:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4816      	ldr	r0, [pc, #88]	; (8002784 <HAL_FMC_MspInit+0xd4>)
 800272a:	f7fe f915 	bl	8000958 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800272e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002732:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002740:	230c      	movs	r3, #12
 8002742:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4619      	mov	r1, r3
 8002748:	480f      	ldr	r0, [pc, #60]	; (8002788 <HAL_FMC_MspInit+0xd8>)
 800274a:	f7fe f905 	bl	8000958 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800274e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002752:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002760:	230c      	movs	r3, #12
 8002762:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <HAL_FMC_MspInit+0xdc>)
 800276a:	f7fe f8f5 	bl	8000958 <HAL_GPIO_Init>
 800276e:	e000      	b.n	8002772 <HAL_FMC_MspInit+0xc2>
    return;
 8002770:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000028 	.word	0x20000028
 800277c:	40023800 	.word	0x40023800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002798:	f7ff ff8a 	bl	80026b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <MX_GPIO_Init>:

/** Configure pins
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	4b59      	ldr	r3, [pc, #356]	; (8002924 <MX_GPIO_Init+0x180>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a58      	ldr	r2, [pc, #352]	; (8002924 <MX_GPIO_Init+0x180>)
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <MX_GPIO_Init+0x180>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <MX_GPIO_Init+0x180>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a51      	ldr	r2, [pc, #324]	; (8002924 <MX_GPIO_Init+0x180>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <MX_GPIO_Init+0x180>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <MX_GPIO_Init+0x180>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <MX_GPIO_Init+0x180>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <MX_GPIO_Init+0x180>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <MX_GPIO_Init+0x180>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a43      	ldr	r2, [pc, #268]	; (8002924 <MX_GPIO_Init+0x180>)
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <MX_GPIO_Init+0x180>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <MX_GPIO_Init+0x180>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a3c      	ldr	r2, [pc, #240]	; (8002924 <MX_GPIO_Init+0x180>)
 8002834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <MX_GPIO_Init+0x180>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <MX_GPIO_Init+0x180>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a35      	ldr	r2, [pc, #212]	; (8002924 <MX_GPIO_Init+0x180>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <MX_GPIO_Init+0x180>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FPGA_TCK_Pin|FPGA_TDI_Pin|SC_ON_OFF_Pin|SC_RST_Pin
 8002862:	2200      	movs	r2, #0
 8002864:	217b      	movs	r1, #123	; 0x7b
 8002866:	4830      	ldr	r0, [pc, #192]	; (8002928 <MX_GPIO_Init+0x184>)
 8002868:	f7fe fa22 	bl	8000cb0 <HAL_GPIO_WritePin>
                          |FPGA_TMS_Pin|FPGA_PROGRAMN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO0_RST_OUT_Pin|FPGA_RST_Pin, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	210c      	movs	r1, #12
 8002870:	482e      	ldr	r0, [pc, #184]	; (800292c <MX_GPIO_Init+0x188>)
 8002872:	f7fe fa1d 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = FPGA_TCK_Pin|FPGA_TDI_Pin|SC_ON_OFF_Pin|SC_RST_Pin
 8002876:	237b      	movs	r3, #123	; 0x7b
 8002878:	61fb      	str	r3, [r7, #28]
                          |FPGA_TMS_Pin|FPGA_PROGRAMN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	4826      	ldr	r0, [pc, #152]	; (8002928 <MX_GPIO_Init+0x184>)
 800288e:	f7fe f863 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FPGA_TDO_Pin;
 8002892:	2304      	movs	r3, #4
 8002894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FPGA_TDO_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4820      	ldr	r0, [pc, #128]	; (8002928 <MX_GPIO_Init+0x184>)
 80028a6:	f7fe f857 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FPGA_INTN_Pin;
 80028aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FPGA_INTN_GPIO_Port, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	481c      	ldr	r0, [pc, #112]	; (8002930 <MX_GPIO_Init+0x18c>)
 80028c0:	f7fe f84a 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4813      	ldr	r0, [pc, #76]	; (8002930 <MX_GPIO_Init+0x18c>)
 80028e2:	f7fe f839 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO1_INT_N_OUT_Pin;
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO1_INT_N_OUT_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	480e      	ldr	r0, [pc, #56]	; (8002934 <MX_GPIO_Init+0x190>)
 80028fc:	f7fe f82c 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO0_RST_OUT_Pin|FPGA_RST_Pin;
 8002900:	230c      	movs	r3, #12
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_GPIO_Init+0x188>)
 8002918:	f7fe f81e 	bl	8000958 <HAL_GPIO_Init>

}
 800291c:	bf00      	nop
 800291e:	3730      	adds	r7, #48	; 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40021000 	.word	0x40021000
 800292c:	40021800 	.word	0x40021800
 8002930:	40020000 	.word	0x40020000
 8002934:	40021400 	.word	0x40021400

08002938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293e:	f7fd fdd1 	bl	80004e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002942:	f000 f845 	bl	80029d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002946:	f7ff ff2d 	bl	80027a4 <MX_GPIO_Init>
  MX_FMC_Init();
 800294a:	f7ff fdff 	bl	800254c <MX_FMC_Init>
  MX_USART1_UART_Init();
 800294e:	f000 f94d 	bl	8002bec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t ret = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, "Start FPGA programming", 22, 100);
 8002956:	2364      	movs	r3, #100	; 0x64
 8002958:	2216      	movs	r2, #22
 800295a:	4919      	ldr	r1, [pc, #100]	; (80029c0 <main+0x88>)
 800295c:	4819      	ldr	r0, [pc, #100]	; (80029c4 <main+0x8c>)
 800295e:	f7fe ff42 	bl	80017e6 <HAL_UART_Transmit>
  //ret = B5_FPGA_Programming();
  HAL_UART_Transmit(&huart1, "FPGA programmed", 15, 100);
 8002962:	2364      	movs	r3, #100	; 0x64
 8002964:	220f      	movs	r2, #15
 8002966:	4918      	ldr	r1, [pc, #96]	; (80029c8 <main+0x90>)
 8002968:	4816      	ldr	r0, [pc, #88]	; (80029c4 <main+0x8c>)
 800296a:	f7fe ff3c 	bl	80017e6 <HAL_UART_Transmit>


	for (;;)
	{
		dataPtr = 8;
 800296e:	2308      	movs	r3, #8
 8002970:	807b      	strh	r3, [r7, #2]
		HAL_SRAM_Write_16b(&SRAM_WRITE, (uint32_t*) FPGA_IPM_SRAM_BASE_ADDR,
 8002972:	1cba      	adds	r2, r7, #2
 8002974:	2301      	movs	r3, #1
 8002976:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800297a:	4814      	ldr	r0, [pc, #80]	; (80029cc <main+0x94>)
 800297c:	f7fe fea6 	bl	80016cc <HAL_SRAM_Write_16b>
				&dataPtr, 1);
		HAL_Delay(1000);
 8002980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002984:	f7fd fe20 	bl	80005c8 <HAL_Delay>
		dataPtr = 2;
 8002988:	2302      	movs	r3, #2
 800298a:	807b      	strh	r3, [r7, #2]
		HAL_SRAM_Write_16b(&SRAM_WRITE, (uint32_t*) FPGA_IPM_SRAM_BASE_ADDR,
 800298c:	1cba      	adds	r2, r7, #2
 800298e:	2301      	movs	r3, #1
 8002990:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <main+0x94>)
 8002996:	f7fe fe99 	bl	80016cc <HAL_SRAM_Write_16b>
				&dataPtr, 1);
		HAL_Delay(1000);
 800299a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299e:	f7fd fe13 	bl	80005c8 <HAL_Delay>
		dataPtr = 5;
 80029a2:	2305      	movs	r3, #5
 80029a4:	807b      	strh	r3, [r7, #2]
		HAL_SRAM_Write_16b(&SRAM_WRITE, (uint32_t*) FPGA_IPM_SRAM_BASE_ADDR,
 80029a6:	1cba      	adds	r2, r7, #2
 80029a8:	2301      	movs	r3, #1
 80029aa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80029ae:	4807      	ldr	r0, [pc, #28]	; (80029cc <main+0x94>)
 80029b0:	f7fe fe8c 	bl	80016cc <HAL_SRAM_Write_16b>
				&dataPtr, 1);
		HAL_Delay(10000);
 80029b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80029b8:	f7fd fe06 	bl	80005c8 <HAL_Delay>
		dataPtr = 8;
 80029bc:	e7d7      	b.n	800296e <main+0x36>
 80029be:	bf00      	nop
 80029c0:	08002de4 	.word	0x08002de4
 80029c4:	20000120 	.word	0x20000120
 80029c8:	08002dfc 	.word	0x08002dfc
 80029cc:	2000002c 	.word	0x2000002c

080029d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	2230      	movs	r2, #48	; 0x30
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f9ec 	bl	8002dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <SystemClock_Config+0xd8>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <SystemClock_Config+0xd8>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <SystemClock_Config+0xd8>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <SystemClock_Config+0xdc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <SystemClock_Config+0xdc>)
 8002a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <SystemClock_Config+0xdc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a38:	2310      	movs	r3, #16
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a44:	2310      	movs	r3, #16
 8002a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002a48:	23c8      	movs	r3, #200	; 0xc8
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a50:	2304      	movs	r3, #4
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a54:	f107 0320 	add.w	r3, r7, #32
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f943 	bl	8000ce4 <HAL_RCC_OscConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a64:	f000 f824 	bl	8002ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a68:	230f      	movs	r3, #15
 8002a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fba4 	bl	80011d4 <HAL_RCC_ClockConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a92:	f000 f80d 	bl	8002ab0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fc80 	bl	80013a0 <HAL_RCC_MCOConfig>
}
 8002aa0:	bf00      	nop
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000

08002ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_MspInit+0x4c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_MspInit+0x4c>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_MspInit+0x4c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_MspInit+0x4c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <HAL_MspInit+0x4c>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_MspInit+0x4c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <HardFault_Handler+0x4>

08002b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler+0x4>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f7fd fd10 	bl	8000588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <USART1_IRQHandler+0x10>)
 8002b72:	f7fe fecb 	bl	800190c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000120 	.word	0x20000120

08002b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <SystemInit+0x60>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <SystemInit+0x60>)
 8002b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <SystemInit+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <SystemInit+0x64>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <SystemInit+0x64>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <SystemInit+0x64>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <SystemInit+0x64>)
 8002bac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <SystemInit+0x64>)
 8002bb8:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <SystemInit+0x68>)
 8002bba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <SystemInit+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <SystemInit+0x64>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <SystemInit+0x60>)
 8002bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bd4:	609a      	str	r2, [r3, #8]
#endif
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	24003010 	.word	0x24003010

08002bec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <MX_USART1_UART_Init+0x50>)
 8002bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002bf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c12:	220c      	movs	r2, #12
 8002c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_USART1_UART_Init+0x4c>)
 8002c24:	f7fe fd92 	bl	800174c <HAL_UART_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c2e:	f7ff ff3f 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000120 	.word	0x20000120
 8002c3c:	40011000 	.word	0x40011000

08002c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <HAL_UART_MspInit+0xd0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d152      	bne.n	8002d08 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_UART_MspInit+0xd4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4811      	ldr	r0, [pc, #68]	; (8002d18 <HAL_UART_MspInit+0xd8>)
 8002cd2:	f7fd fe41 	bl	8000958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480a      	ldr	r0, [pc, #40]	; (8002d1c <HAL_UART_MspInit+0xdc>)
 8002cf4:	f7fd fe30 	bl	8000958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2025      	movs	r0, #37	; 0x25
 8002cfe:	f7fd fd62 	bl	80007c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d02:	2025      	movs	r0, #37	; 0x25
 8002d04:	f7fd fd7b 	bl	80007fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020000 	.word	0x40020000

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d58 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d26:	e003      	b.n	8002d30 <LoopCopyDataInit>

08002d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d2e:	3104      	adds	r1, #4

08002d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d38:	d3f6      	bcc.n	8002d28 <CopyDataInit>
  ldr  r2, =_sbss
 8002d3a:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d3c:	e002      	b.n	8002d44 <LoopFillZerobss>

08002d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d40:	f842 3b04 	str.w	r3, [r2], #4

08002d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d48:	d3f9      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d4a:	f7ff ff19 	bl	8002b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f000 f811 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7ff fdf1 	bl	8002938 <main>
  bx  lr    
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d58:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d5c:	08002e34 	.word	0x08002e34
  ldr  r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d64:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002d68:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002d6c:	20000164 	.word	0x20000164

08002d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC_IRQHandler>
	...

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4d0d      	ldr	r5, [pc, #52]	; (8002dac <__libc_init_array+0x38>)
 8002d78:	4c0d      	ldr	r4, [pc, #52]	; (8002db0 <__libc_init_array+0x3c>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	2600      	movs	r6, #0
 8002d80:	42a6      	cmp	r6, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	4d0b      	ldr	r5, [pc, #44]	; (8002db4 <__libc_init_array+0x40>)
 8002d86:	4c0c      	ldr	r4, [pc, #48]	; (8002db8 <__libc_init_array+0x44>)
 8002d88:	f000 f820 	bl	8002dcc <_init>
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	2600      	movs	r6, #0
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9c:	4798      	blx	r3
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da6:	4798      	blx	r3
 8002da8:	3601      	adds	r6, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	08002e2c 	.word	0x08002e2c
 8002db0:	08002e2c 	.word	0x08002e2c
 8002db4:	08002e2c 	.word	0x08002e2c
 8002db8:	08002e30 	.word	0x08002e30

08002dbc <memset>:
 8002dbc:	4402      	add	r2, r0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <memset+0xa>
 8002dc4:	4770      	bx	lr
 8002dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dca:	e7f9      	b.n	8002dc0 <memset+0x4>

08002dcc <_init>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr

08002dd8 <_fini>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr
